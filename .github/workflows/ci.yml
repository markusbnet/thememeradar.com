name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment variables
        run: |
          cp .env.local.example .env.local
          echo "DYNAMODB_ENDPOINT=http://localhost:8000" >> .env.local
          echo "AWS_REGION=us-east-1" >> .env.local
          echo "AWS_ACCESS_KEY_ID=test" >> .env.local
          echo "AWS_SECRET_ACCESS_KEY=test" >> .env.local
          echo "JWT_SECRET=test-secret-key-for-ci" >> .env.local
          echo "SESSION_COOKIE_NAME=meme_radar_session" >> .env.local
          echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> .env.local

      - name: Wait for DynamoDB Local
        run: sleep 5

      - name: Initialize DynamoDB tables
        run: npx tsx scripts/init-db.ts
        env:
          DYNAMODB_ENDPOINT: http://localhost:8000
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test

      - name: Wait for tables to be ready
        run: sleep 2

      - name: Verify DynamoDB tables exist
        run: |
          aws dynamodb list-tables --endpoint-url http://localhost:8000 --region us-east-1
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm run test -- --testPathPattern=tests/unit
        env:
          DYNAMODB_ENDPOINT: http://localhost:8000
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test

      - name: Run integration tests
        run: npm run test -- --testPathPattern=tests/integration --runInBand
        env:
          DYNAMODB_ENDPOINT: http://localhost:8000
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test

      # - name: Install Playwright browsers
      #   run: npx playwright install --with-deps

      - name: Build Next.js app
        run: npm run build

      # - name: Run E2E tests
      #   run: npm run test:e2e
      #   env:
      #     CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: .next/
          retention-days: 7

  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment ready notification
        run: |
          echo "‚úÖ All tests passed and build completed successfully!"
          echo "üì¶ Ready for deployment to Vercel"
          echo "üîó Repository: ${{ github.repository }}"
          echo "üìù Commit: ${{ github.sha }}"

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deployment success notification
        run: |
          echo "üöÄ Successfully deployed to Vercel!"
          echo "üì¶ Vercel Cron Job configured for /api/scan every 15 minutes"
